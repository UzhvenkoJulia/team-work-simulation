ООП. ЛАБОРАТОРНА РОБОТА 3. Симуляція командної роботи. (так вийшло, попрацюємо самостійно)
3.2.1.    Розділіться на команди по три – чотири людини. Одного з членів команди обирають капітаном.(сам собі капітан)

a)    Капітан має створити репозиторій на відділеному сервері (GitHub) (team-work-simulation) 
b)    Капітан додає всіх учасників команди, як контрибюторів для того, щоб вони могли не лише стягувати репозиторій, але і засилати на нього свої коміти. Контрибютори мають підтвердити прийняття запрошення. (GitHub -> Settings -> Manage access -> Invite a collaborator -> Add [user] to this repository)
c)    Капітан робить перший коміт та засилає його на віддалений репозиторій, для того щоб ініціалізувати історію. (git add . -> git commit -m -> git push origin main)
d)    Всі члени команди клонують собі цей репозиторій та розпочинають з ним працювати. (git clone https://github.com/"ім'я_користувача/назва_репозиторію".git)
e)    Для початкової ініціалізації репозиторія, капітан додає файл utils.py з кодом у якому будуть описані різні функції, додає у нього функцію для обчислення факторіалу, далі створює файл main.py у якому здійснює виклик цієї функції. Далі засилає цей доробок на віддалений репозиторій. (git add utils.py main.py -> git commit -m "Додано файли utils.py та main.py з функцією для обчислення факторіалу" -> git push origin main)
f)    Всі члени команди оновлюють репозиторій додають по одній функції (визначення чи є число простим, обчислення НСД, визначення чи є числом степенем п’ятірки тощо) у файл utils.py та засилають ці зміни на віддалений репозиторій.
Важливо: безпосередньо перед кожним засиланням на віддалений репозиторій, необхідно стягувати зміни які там могли відбутися за час після останнього доступу до репозиторія. (git pull origin main -> git add utils.py -> git commit -m "Додано функцію для визначення чисел степенем п'ятірки" -> git push origin main)
g)    Після того, як всі заслали свої зміни, кожен з членів команди модифікує файл main.py, тим що додає виклик своєї функції та засилає на віддалений репозиторій.
(git checkout -b feature_branch -> git add main.py -> git commit -m "Added call to my function in main.py" -> git push origin HEAD:for_review)

Вказівка: У робочих проектах засилання змін на віддалений репозиторій відбувається не безпосередньо, а через маханізми рецензування коду іншими учасниками команди. На GitHub процедура рецензування відбувається через механізм, що називається Pull request – запит за зливання однієї гілки у іншу. Для використання механізму Pull Request потрібно надіслати коміт на іншу гілку віддаленого репозиторія. Для цього, після коміту на робочій гілці, виконайте команду
git push origin HEAD:for_review
На віддаленому репозиторії при цьому буде створено гілку for_review. Можна використовувати будь-яке інше імʼя на ваш розсуд. Після засилання відкриваємо репозиторій на GitHub, створюємо Pull Request з вашої гілки у робочу гілку (запит для зливання вашої гілки у робочу гілку). Додаєте у ролі рецензентів колег з вашої команди.
h)    У  цьому пункті спробуйте реалізувати засилання комітів у віддалений репозиторій на GitHub через механізм Pull Request. Проробіть операції подібні до тих, що були описані у попередніх пунктах, ще принаймні три рази (внесення зміна, коміт, стягування з репозиторія, вирішення конфліктів, заливання на віддалений репозиторій). Додайте різні функції які були написані вами у рамках попередніх курсів у файл utils.py та здійсніть їхні виклики. Передбачається, що кожен учасник додає різні функції.
(git checkout -b feature_branch -> git add utils.py -> git commit -m "Додано нову функцію до utils.py" -> git push origin HEAD:for_review)

Проробіть вище переведені операції для іншого члена команди у ролі капітана. (самостійно реальго також усе проробити)
Дякую!!